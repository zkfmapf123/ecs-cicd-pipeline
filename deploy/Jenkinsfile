pipeline {
    agent any

    // 원래는 다 환경변수에 담아서 .. 진행하자..

    stages {
        stage('Push ECR') {
            steps {
                dir("apiserver") {
                    script {
                        sh "docker build -t build-latest ."
                        sh "docker tag build-latest 182024812696.dkr.ecr.ap-northeast-2.amazonaws.com/todolist-repository:build-latest"

                        docker.withRegistry("https://182024812696.dkr.ecr.ap-northeast-2.amazonaws.com/todolist-repository:build-latest", "ecr:ap-northeast-2:leedonggyu-aws-credentials") {
                            docker.image("182024812696.dkr.ecr.ap-northeast-2.amazonaws.com/todolist-repository:build-latest").push()
                        }
                    }
                }
            }
        }

        // stage("Deploy ECS") {
        //     steps {
        //         dir("apiserver/deploy") {
        //             script {
        //                 withAWS(credentials:"leedonggyu-aws-credentials", region:"ap-northeast-2") {
        //                     sh "aws ecs register-task-definition --cli-input-json file://task-definition.json"          
        //                     sh "aws ecs update-service --cluster pipeline-todolist-cluster --service todolist-service --task-definition todolist-family"
        //                 }
        //             }
        //         }
        //     }
        // }

        stage("Deploy ECS via CodeDeploy") {
            steps {
                dir("apiserver/deploy") {
                    script {
                        withAWS(credentials: "leedonggyu-aws-credentials", region: "ap-northeast-2") {
                            sh "aws deploy create-deployment --application-name YourCodeDeployApplicationName --deployment-group-name YourDeploymentGroupName --revision revisionType=AppSpecContent,value=\"$(cat appspec.yml)\""
                        }
                    }
                }
            }
        }
    }
}
